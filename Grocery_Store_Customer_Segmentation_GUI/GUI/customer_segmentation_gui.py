# import libraries
import streamlit as st
import pandas as pd
import numpy as np
import pickle
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
from datetime import datetime

# Load data/model & preprocessing
df_segments = pd.read_csv("df_segments.csv")
rfm_segments = pd.read_csv("rfm_segments.csv")
df1 = pd.read_csv('Products_with_Categories.csv')
df2 = pd.read_csv('Transactions.csv')
df = pd.merge(df2, df1, on='productId', how='inner')
df['purchase_amount'] = df['price'] * df['items']
df['Date'] = df['Date'].apply(lambda x : datetime.strptime(x, '%d-%m-%Y').date()).astype('datetime64[ns]')
df.drop_duplicates(inplace=True)
product = df.groupby('productName').agg({'price':'mean', 'items':'sum', 'purchase_amount':'sum', 'Category': lambda x: x.mode().iloc[0]}).reset_index()
category = df[['Category','items','purchase_amount']].groupby('Category').sum().sort_values(by='purchase_amount', ascending=False).reset_index()
category['percent_amount'] = category['purchase_amount']/sum(category['purchase_amount'])*100

@st.cache_resource
def load_model():
    with open("kmeans_model.pkl", "rb") as file:
        return pickle.load(file)

model = load_model()

# H√†m v·∫Ω bi·ªÉu ƒë·ªì
def draw_barplot(data, x, y, title, xlabel, ylabel, palette, figsize):
    fig, ax = plt.subplots(figsize=figsize)
    sns.barplot(data=data, x=x, y=y, palette=palette, ax=ax, ci=None)
    ax.set_title(title)
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    st.pyplot(fig)

def draw_pieplot(data, labels, autopct, colors, pctdistance, title, figsize):
    fig, ax = plt.subplots(figsize=figsize)
    plt.pie(data, labels=labels, autopct=autopct, colors=colors, pctdistance=pctdistance)
    ax.set_title(title)
    plt.tight_layout()
    st.pyplot(fig)

def draw_lineplot(x, y, labels, title_text):
    fig = px.line(x=x, y=y, labels=labels)
    fig.update_layout(title_text=title_text, title_x=0.4, title_font=dict(size=18))
    st.plotly_chart(fig, use_container_width=True)

# Sidebar Navigation
section = st.sidebar.radio("Outline", options=["üìö Overview", "üìä Insights & Results", "üë™ Customer Segmentation"])
st.sidebar.markdown("---")
# Th√¥ng tin nh√≥m th·ª±c hi·ªán
st.sidebar.markdown("#### ‚ú® Th·ª±c hi·ªán b·ªüi:")
st.sidebar.markdown("""
                    - Nguy·ªÖn Nh·∫≠t T·ªë Tr√¢n
                    - Nguy·ªÖn V≈© Mai Ph∆∞∆°ng""")
# Th√¥ng tin gi·∫£ng vi√™n
st.sidebar.markdown("#### üë©‚Äçüè´ Gi·∫£ng vi√™n: C√¥ Khu·∫•t Th√πy Ph∆∞∆°ng")
# Ng√†y b√°o c√°o
st.sidebar.markdown("#### üìÖ Th·ªùi gian: 04/2025")
st.sidebar.markdown("---")
st.sidebar.image('Images/logo.jpg', use_container_width =True)

# 1. Gi·ªõi thi·ªáu project
if section == "üìö Overview":
    st.title("üëã Welcome to Customer Segmentation App of a Grocery Store")
    st.image('Images/grocery_store.jfif', use_container_width =True)

    st.subheader("‚ùì Business")
    st.markdown("ƒê√¢y l√† m·ªôt c·ª≠a h√†ng t·∫°p h√≥a b√°n s·∫£n ph·∫©m thi·∫øt y·∫øu nh∆∞ rau, c·ªß, qu·∫£, th·ªãt, c√°, tr·ª©ng, s·ªØa, n∆∞·ªõc gi·∫£i kh√°t...  v√† kh√°ch h√†ng c·ªßa h·ªç l√† nh·ªØng ng∆∞·ªùi mua l·∫ª, v·ªõi mong mu·ªën c√≥ th·ªÉ b√°n ƒë∆∞·ª£c nhi·ªÅu h√†ng h√≥a h∆°n c≈©ng nh∆∞ gi·ªõi thi·ªáu s·∫£n ph·∫©m ƒë·∫øn ƒë√∫ng ƒë·ªëi t∆∞·ª£ng kh√°ch h√†ng, chƒÉm s√≥c v√† l√†m h√†i l√≤ng kh√°ch h√†ng.")

    st.subheader("üéØ Solution")
    st.markdown("""
    D·ª± √°n **Customer Segmentation** s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p ph√¢n t√≠ch **RFM (Recency, Frequency, Monetary)** 
    nh·∫±m chia kh√°ch h√†ng th√†nh c√°c nh√≥m ƒë·ªÉ ph·ª•c v·ª• c√°c chi·∫øn l∆∞·ª£c marketing kh√°c nhau.  
    - **Recency**: S·ªë ng√†y k·ªÉ t·ª´ l·∫ßn mua h√†ng g·∫ßn nh·∫•t  
    - **Frequency**: S·ªë l·∫ßn mua h√†ng  
    - **Monetary**: T·ªïng gi√° tr·ªã ƒë∆°n h√†ng  

    K·∫øt h·ª£p ph∆∞∆°ng ph√°p **RFM** v√† thu·∫≠t to√°n **KMeans**, h·ªá th·ªëng ph√¢n nh√≥m kh√°ch h√†ng gi√∫p tƒÉng hi·ªáu qu·∫£ trong vi·ªác c√° nh√¢n h√≥a chƒÉm s√≥c, gi·ªØ ch√¢n kh√°ch h√†ng, ƒë·ªìng th·ªùi gi√∫p doanh nghi·ªáp tƒÉng tƒÉng doanh thu.
    """)

# 2. K·∫øt qu·∫£
elif section == "üìä Insights & Results":
    st.markdown("""<style>/* Tab ƒëang ƒë∆∞·ª£c ch·ªçn - l√†m n·ªïi b·∫≠t */div[data-testid="stTabs"] button[aria-selected="true"] {color: #FF4B4B !important; border-bottom: 3px solid #FF4B4B !important; font-weight: 800 !important;}
                        /* CƒÉn gi·ªØa t·∫•t c·∫£ c√°c tab */div[data-testid="stTabs"] div[role="tablist"] {justify-content: center !important;}
                   </style>""", unsafe_allow_html=True)

    tab1, tab2, tab3 = st.tabs(["üîé DATASET & INSIGHTS", "üìà K·∫æT QU·∫¢ PH√ÇN C·ª§M", "‚≠ê ƒê·ªÄ XU·∫§T GI·∫¢I PH√ÅP"])

    with tab1:
        st.subheader("üìÑ T·ªïng quan v·ªÅ Dataset")

        col1, col2, col3, col4 = st.columns(4)
        with col1:
            #st.metric("S·ªë l∆∞·ª£ng kh√°ch h√†ng", df['Member_number'].nunique())
            st.markdown(f"""<div style="background-color: #2c2f33; padding: 8px; border-radius: 8px; text-align: center; color: white; line-height: 1.4;">
                                <div style="font-size: 14px; font-weight: 100;">S·ªë l∆∞·ª£ng kh√°ch h√†ng</div>
                                <div style="font-size: 30px; color: lightgreen; font-weight: bold;">{df['Member_number'].nunique()}</div>
                            </div>""", unsafe_allow_html=True)
        with col2:
            #st.metric("S·ªë l∆∞·ª£ng s·∫£n ph·∫©m", df['productId'].nunique())
            st.markdown(f"""<div style="background-color: #2c2f33; padding: 8px; border-radius: 8px; text-align: center; color: white; line-height: 1.4;">
                                <div style="font-size: 14px; font-weight: 100;">S·ªë l∆∞·ª£ng s·∫£n ph·∫©m</div>
                                <div style="font-size: 30px; color: lightgreen; font-weight: bold;">{df['productId'].nunique()}</div>
                            </div>""", unsafe_allow_html=True)
        with col3:
            st.markdown(f"""<div style="background-color: #2c2f33; padding: 8px; border-radius: 8px; text-align: center; color: white; line-height: 1.4;">
                                <div style="font-size: 14px; font-weight: 100;">L∆∞·ª£ng h√†ng ƒë√£ b√°n</div>
                                <div style="font-size: 30px; color: lightgreen; font-weight: bold;">{df['items'].sum()}</div>
                            </div>""", unsafe_allow_html=True)
        with col4:
            st.markdown(f"""<div style="background-color: #2c2f33; padding: 8px; border-radius: 8px; text-align: center; color: white; line-height: 1.4;">
                                <div style="font-size: 14px; font-weight: 100;">Doanh thu ($)</div>
                                <div style="font-size: 30px; color: lightgreen; font-weight: bold;">{f"{round(sum(df['purchase_amount'])/1000000, 2)} M"}</div>
                            </div>""", unsafe_allow_html=True)
        st.write("")
        num_rows = st.slider("Ch·ªçn s·ªë d√≤ng data hi·ªÉn th·ªã", min_value=1, max_value=100, value=5, step=1)
        # Hi·ªÉn th·ªã dataframe v·ªõi s·ªë d√≤ng ƒë∆∞·ª£c ch·ªçn
        st.dataframe(df.head(num_rows))

        st.markdown("- C√°c giao d·ªãch ƒë∆∞·ª£c ghi nh·∫≠n trong kho·∫£ng th·ªùi gian t·ª´ 01-01-2014 ƒë·∫øn 30-12-2015")

        st.subheader("üîé Insights")
        st.markdown("#### üìå S·∫£n ph·∫©m")

        # V·∫Ω bi·ªÉu ƒë·ªì Doanh thu theo s·∫£n ph·∫©m
        top_n_revenue = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng s·∫£n ph·∫©m hi·ªÉn th·ªã (doanh thu)", min_value=2, max_value=len(product), value=5, step=1)
        top_df_revenue = product.sort_values(by='purchase_amount', ascending=False).head(top_n_revenue)
        draw_barplot(top_df_revenue, 'productName', 'purchase_amount', "Doanh thu theo s·∫£n ph·∫©m", "S·∫£n ph·∫©m", "Doanh thu", 'Blues_d', (15, 8))
        st.markdown("- S·∫£n ph·∫©m mang l·∫°i doanh thu nhi·ªÅu nh·∫•t : Th·ªãt b√≤, tr√°i c√¢y nhi·ªát ƒë·ªõi, khƒÉn gi·∫•y, ph√¥ mai t∆∞∆°i, s√¥ c√¥ la ƒë·∫∑c s·∫£n")

        # V·∫Ω bi·ªÉu ƒë·ªì L∆∞·ª£ng s·∫£n ph·∫©m ti√™u th·ª•
        top_n_items = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng s·∫£n ph·∫©m hi·ªÉn th·ªã (s·ªë l∆∞·ª£ng)", min_value=2, max_value=len(product), value=5, step=1)
        top_df_items = product.sort_values(by='items', ascending=False).head(top_n_items)
        draw_barplot(top_df_items, 'productName', 'items', "L∆∞·ª£ng s·∫£n ph·∫©m ti√™u th·ª•", "S·∫£n ph·∫©m", "S·ªë l∆∞·ª£ng ti√™u th·ª•", 'pink', (15, 8))
        st.markdown("""
        - S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t : S·ªØa t∆∞∆°i nguy√™n ch·∫•t, rau c·ªß kh√°c, b√°nh m√¨ cu·ªôn, soda, s·ªØa chua
        - S·∫£n ph·∫©m b√°n ch·∫≠m nh·∫•t (mang l·∫°i √≠t doanh thu nh·∫•t) : G√† ƒë√¥ng l·∫°nh, c·ªìn s√°t tr√πng, n∆∞·ªõc t·∫©y trang, s·∫£n ph·∫©m b·∫£o qu·∫£n, d·ª•ng c·ª• nh√† b·∫øp
                        """)
        
        # V·∫Ω bi·ªÉu ƒë·ªì Gi√° s·∫£n ph·∫©m
        top_n_price = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng s·∫£n ph·∫©m hi·ªÉn th·ªã (gi√° b√°n)", min_value=2, max_value=len(product), value=5, step=1)
        top_df_price = product.sort_values(by='price', ascending=False).head(top_n_price)
        draw_barplot(top_df_price, 'productName', 'price', "Gi√° b√°n theo s·∫£n ph·∫©m", "S·∫£n ph·∫©m", "Gi√° b√°n", 'Greens', (15, 8))
        st.markdown("""
        - S·∫£n ph·∫©m c√≥ gi√° cao nh·∫•t : R∆∞·ª£u Whisky, M·ªπ ph·∫©m cho b√©, KhƒÉn ƒÉn, R∆∞·ª£u Prosecco, T√∫i x√°ch
        - S·∫£n ph·∫©m c√≥ gi√° th·∫•p nh·∫•t : B√°nh m·ª≥, Gum, N∆∞·ªõc ƒë√≥ng chai, Snack, S·∫£n ph·∫©m ƒÉn li·ªÅn
                        """)

        st.markdown("#### üìå Ng√†nh h√†ng")
        #st.image('Images/Cate_Analysis.png', use_container_width =True)
        draw_barplot(category, 'Category', 'purchase_amount', "Doanh thu theo ng√†nh h√†ng", "Ng√†nh h√†ng", "Doanh thu", 'rocket', (20,8))
        draw_barplot(category.sort_values(by='items', ascending=False), 'Category', 'items', "L∆∞·ª£ng s·∫£n ph·∫©m ƒë√£ b√°n theo ng√†nh h√†ng", "Ng√†nh h√†ng", "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë√£ b√°n", 'YlOrBr', (20,8))
        draw_pieplot(category['purchase_amount'], category['Category'], '%1.1f%%', sns.color_palette("Set3", len(category)), 0.8, 'T·ª∑ l·ªá doanh thu theo ng√†nh h√†ng', (8,8))
        st.markdown("""
        - Th·ª±c ph·∫©m t∆∞∆°i s·ªëng ƒë√≥ng g√≥p 1/3 doanh thu
        - Ng√†ng h√†ng b√°n ch·∫°y nh·∫•t, ƒë√≥ng g√≥p h∆°n 60% doanh thu : Th·ª±c ph·∫©m t∆∞∆°i s·ªëng, S·∫£n ph·∫©m t·ª´ s·ªØa, B√°nh m√¨ & ƒë·ªì ng·ªçt
        - S·∫£n ph·∫©m chƒÉm s√≥c th√∫ c∆∞ng, ƒë·ªì ƒÉn v·∫∑t, chƒÉm s√≥c c√° nh√¢n l√† c√°c ng√†nh h√†ng b√°n ch·∫≠m nh·∫•t c·ªßa c·ª≠a h√†ng
                        """)

        st.markdown("#### üìå Doanh thu v√† kh√°ch h√†ng")
        sales_weekly = df.resample('W', on='Date').size()
        draw_lineplot(sales_weekly.index, sales_weekly.values, {'y': 'Number of Sales','x': 'Date'}, 'Number of Sales Weekly')
        st.markdown("""
        - Bi·ªÉu ƒë·ªì **T·ªïng doanh thu theo tu·∫ßn** c√≥ s·ª± bi·∫øn ƒë·ªông r√µ r·ªát, nguy√™n nh√¢n c√≥ th·ªÉ ƒë·∫øn t·ª´ l∆∞·ª£ng kh√°ch h√†ng ƒë·∫øn mua t·∫°i c·ª≠a h√†ng kh√¥ng ·ªïn ƒë·ªãnh. 
        - Nh√¨n chung doanh thu nƒÉm 2015 tƒÉng h∆°n so v·ªõi nƒÉm 2014.
                        """)
        unique_customer_weekly = df.resample('w', on='Date').Member_number.nunique()
        draw_lineplot(unique_customer_weekly.index, unique_customer_weekly.values, {'y': 'Number of Customers','x': 'Number of Customers Weekly'}, 'Number of Customers Weekly')
        st.markdown("""
        - Bi·ªÉu ƒë·ªì **Kh√°ch h√†ng theo tu·∫ßn** c√≥ s·ª± tƒÉng gi·∫£m li√™n t·ª•c. 
        - L∆∞·ª£ng kh√°ch nƒÉm 2014 c√≥ xu h∆∞·ªõng tƒÉng nh·∫π nh∆∞ng sang nƒÉm 2015 bi·ªÉu ƒë·ªì c√≥ xu h∆∞·ªõng gi·∫£m, c·ª≠a h√†ng ƒë√£ m·∫•t ƒëi l∆∞·ª£ng kh√°ch.""")        
        sales_per_customer = sales_weekly / unique_customer_weekly
        draw_lineplot(sales_per_customer.index, sales_per_customer.values, {'y': 'Sales per Customer Ratio','x':'Date'}, 'Sales per Customer Weekly')
        st.markdown("- D√π l∆∞·ª£ng kh√°ch h√†ng ƒë·∫øn mua kh√¥ng ·ªïn ƒë·ªãnh, nh∆∞ng **Doanh thu tr√™n t·ª´ng kh√°ch h√†ng** c√≥ xu h∆∞·ªõng tƒÉng qua 2 nƒÉm. L∆∞·ª£ng doanh thu tƒÉng ƒë·ªôt bi·∫øn b·∫Øt ƒë·∫ßu t·ª´ ƒë·∫ßu nƒÉm 2015 v√† duy tr√¨ ·ªïn ƒë·ªãnh ƒë·∫øn h·∫øt nƒÉm 2015. C√≥ th·ªÉ th·∫•y r·∫±ng tuy l∆∞·ª£ng kh√°ch c·ªßa c·ª≠a h√†ng kh√¥ng ·ªïn ƒë·ªãnh, th·∫ø nh∆∞ng c·ª≠a h√†ng v·∫´n gi·ªØ ƒë∆∞·ª£c m·ªôt l∆∞·ª£ng kh√°ch trung th√†nh ƒë√≥ng g√≥p ph·∫ßn l·ªõn doanh thu cho c·ª≠a h√†ng.")
        
    with tab2:
        st.subheader("üìå Ph√¢n t√≠ch RFM")
        st.image('Images/RFM.png', use_container_width =True)
        st.markdown("""
        - Ph·∫ßn l·ªõn kh√°ch h√†ng ƒë√£ mua h√†ng 5 th√°ng g·∫ßn ƒë√¢y, bi·ªÉu ƒë·ªì Recency l·ªách ph·∫£i, ƒë√¢y l√† t√≠n hi·ªáu t·ªët cho c·ª≠a h√†ng khi th·ªùi gian mua h√†ng c√†ng xa th√¨ s·ªë l∆∞·ª£ng kh√°ch h√†ng gi·∫£m m·∫°nh
        - T·∫≠p trung ·ªü kho·∫£ng 2-6 l·∫ßn mua h√†ng
        - Ph·∫ßn l·ªõn kh√°ch h√†ng chi d∆∞·ªõi 100$, v√† s·ªë l∆∞·ª£ng kh√°ch h√†ng chi nhi·ªÅu h∆°n s·∫Ω gi·∫£m d·∫ßn.""") 
        
        st.subheader("üìå X√¢y d·ª±ng m√¥ h√¨nh")
        st.markdown("""
                    - Ti·∫øn h√†nh x√¢y d·ª±ng m√¥ h√¨nh ph√¢n c·ª•m kh√°ch h√†ng b·∫±ng c√°c thu·∫≠t to√°n: **Manual Segmentation, KMeans, GMM, DBSCAN**, v√† **Hierarchical Clustering**, √°p d·ª•ng l·∫ßn l∆∞·ª£t tr√™n ba tr∆∞·ªùng h·ª£p d·ªØ li·ªáu: g·ªëc, ƒë√£ lo·∫°i b·ªè outliers, ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a (scaled) v√† x·ª≠ l√Ω tr√™n m√¥i tr∆∞·ªùng PySpark.
                    - M·ª•c ti√™u l√† t√¨m ƒë∆∞·ª£c m√¥ h√¨nh c√≥ s·ª± c√¢n b·∫±ng t·ªëi ∆∞u gi·ªØa s·ªë l∆∞·ª£ng c·ª•m kh√°ch h√†ng v√† ch·ªâ s·ªë **Silhouette** nh·∫±m ƒë·∫£m b·∫£o t√≠nh ph√¢n bi·ªát v√† ch·∫•t l∆∞·ª£ng c·ªßa c√°c c·ª•m""")
        phuong_phap = ['Manual', 'GMM(S)', 'GMM(RO)', 'GMM', 'DBSCAN', 'Hi(RO)', 'Hi(S)','DBSCAN(RO)', 'Hi', 'K(S)', 'K(5)', 'K(RO)', 'K(PS+RO)', 'DBSCAN(S)', 'K(PS+S)', 'K(2)', 'K(PS)']
        so_cum = [6, 6, 4 , 6, 2, 6, 4, 1, 6, 3, 5, 4, 6, 1, 5, 2, 5]
        silhouette_score = [-0.059, 0.13, 0.2, 0.2, 0.23, 0.23, 0.25, 0.3, 0.33, 0.36, 0.4, 0.42, 0.45, 0.45, 0.48, 0.57, 0.58]

        # T·∫°o bi·ªÉu ƒë·ªì
        fig, ax1 = plt.subplots(figsize=(10, 6))
        # Bar graph cho s·ªë c·ª•m
        ax1.bar(phuong_phap, so_cum, color='skyblue', label='S·ªë c·ª•m')
        ax1.set_ylabel('S·ªë c·ª•m', color='blue')
        ax1.set_xlabel('Ph∆∞∆°ng ph√°p')
        ax1.tick_params(axis='y', labelcolor='blue')
        ax1.set_ylim(0, max(so_cum)+1)
        ax1.set_xticklabels(phuong_phap, rotation=45, ha='right')
        # Line graph cho Silhouette Score
        ax2 = ax1.twinx()
        ax2.plot(phuong_phap, silhouette_score, color='red', marker='o', label='Silhouette Score')
        ax2.set_ylabel('Silhouette Score', color='red')
        ax2.tick_params(axis='y', labelcolor='red')
        ax2.set_ylim(min(silhouette_score)-0.1, max(silhouette_score)+0.1)
        ax2.set_xticklabels(phuong_phap, rotation=45, ha='right')
        st.pyplot(fig)
        st.markdown("""
                    Ch√∫ th√≠ch bi·ªÉu ƒë·ªì:
                    - S : Scale, l√† tr∆∞·ªùng h·ª£p ƒë√£ chu·∫©n h√≥a d·ªØ li·ªáu
                    - RO : Remove outliers, l√† tr∆∞·ªùng h·ª£p lo·∫°i b·ªè outliers
                    - PS : PySpark, ƒë∆∞·ª£c th·ª±c hi·ªán tr√™n m√¥i tr∆∞·ªùng PySpark
                    - Hi : thu·∫≠t to√°n Hierarchical Clustering
                    - K : thu·∫≠t to√°n KMeans 
                    """)
        st.markdown("K·∫øt qu·∫£ cho th·∫•y, thu·∫≠t to√°n **KMeans** v∆∞·ª£t tr·ªôi h∆°n so v·ªõi c√°c ph∆∞∆°ng ph√°p c√≤n l·∫°i ·ªü c·∫£ ba tr∆∞·ªùng h·ª£p, v·ªõi **Silhouette Score** cao v√† s·ªë l∆∞·ª£ng c·ª•m h·ª£p l√Ω, t√°ch bi·ªát nhau, cho th·∫•y kh·∫£ nƒÉng ph√¢n t√°ch v√† gom nh√≥m kh√°ch h√†ng hi·ªáu qu·∫£ nh·∫•t.")

        st.subheader("üìå K·∫øt qu·∫£ ph√¢n c·ª•m kh√°ch h√†ng")
        st.markdown("Ph√¢n chia kh√°ch h√†ng th√†nh 5 nh√≥m d·ª±a tr√™n m√¥ h√¨nh **KMeans**, c√°c gi√° tr·ªã Recency, Frequency, Monetary trung b√¨nh, T·ª∑ l·ªá s·ªë l∆∞·ª£ng kh√°ch h√†ng c·ªßa m·ªói nh√≥m v√† Doanh thu ƒë√≥ng g√≥p t∆∞∆°ng ·ª©ng:")
        st.dataframe(rfm_segments.rename(columns={'Cluster':'Nh√≥m', 'Percent_Quantity':'T·ª∑ l·ªá', 'Percent_Revenue':'Doanh thu'}).head())
        st.image('Images/customer_segmentation.png', use_container_width =True)
        st.markdown("""
        - **Hardcore** : Chi·∫øm 15% s·ªë l∆∞·ª£ng kh√°ch h√†ng c·ªßa c·ª≠a h√†ng, nh∆∞ng mang l·∫°i doanh thu l·ªõn nh·∫•t khi mua h√†ng th∆∞·ªùng xuy√™n v√† chi ti√™u r·∫•t nhi·ªÅu  
        - **Loyal** : L√† nh√≥m kh√°ch h√†ng mua h√†ng th∆∞·ªùng xuy√™n, chi·∫øm 31% s·ªë l∆∞·ª£ng  
        - **Potential** : Nh√≥m kh√°ch h√†ng ti·ªÅm nƒÉng, s·ªë l∆∞·ª£ng v√† chi ti√™u x·∫•p x·ªâ nh√≥m Loyal, tuy nhi√™n th·ªùi gian mua h√†ng l√¢u    
        - **At Risk** : Nh√≥m kh√°ch h√†ng c√≥ nguy c∆° r·ªùi b·ªè c·ª≠a h√†ng khi ƒë√£ l√¢u kh√¥ng mua h√†ng (chi·∫øm 18%)
        - **Lost** : Nh√≥m kh√°ch h√†ng kh√¥ng c√≤n t∆∞∆°ng t√°c v·ªõi c·ª≠a h√†ng (ch·ªâ chi·∫øm 8%) v√† gi√° tr·ªã mua h√†ng r·∫•t th·∫•p
        """)

    with tab3:
        st.subheader("üîµ Bi·ªÉu ƒë·ªì Doanh thu theo t·ª´ng nh√≥m kh√°ch h√†ng")
        st.markdown('') 
        draw_pieplot(rfm_segments['Percent_Revenue'], rfm_segments['Cluster'], '%1.1f%%', sns.color_palette("Pastel1", len(rfm_segments)), 0.8, '', (4,4))
        st.markdown('')   
        st.subheader("üõçÔ∏è ƒê·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c ti·∫øp c·∫≠n t·ª´ng nh√≥m kh√°ch h√†ng")
        st.markdown('') 
        segments = [{"Segment": "Hardcore","T·ª∑ l·ªá": "15.4%","ƒê·∫∑c ƒëi·ªÉm": "R: Cao | F: Cao | M: Cao","Doanh thu": "32%","M·ª•c ti√™u": "Gi·ªØ ch√¢n, tƒÉng gi√° tr·ªã ƒë∆°n","Ph∆∞∆°ng ph√°p": "Ch∆∞∆°ng tr√¨nh kh√°ch h√†ng th√¢n thi·∫øt cao c·∫•p, d·ªãch v·ª• c√° nh√¢n h√≥a, cross-sell"},
                    {"Segment": "Loyal","T·ª∑ l·ªá": "31%","ƒê·∫∑c ƒëi·ªÉm": "R: Cao | F: Cao | M: TB","Doanh thu": "26%","M·ª•c ti√™u": "TƒÉng gi√° tr·ªã ƒë∆°n","Ph∆∞∆°ng ph√°p": "T√≠ch ƒëi·ªÉm th√†nh vi√™n, khuy·∫øn m√£i combo, ∆Øu ƒë√£i sinh nh·∫≠t & d·ªãp ƒë·∫∑c bi·ªát"},
                    {"Segment": "Potential","T·ª∑ l·ªá": "27.6%","ƒê·∫∑c ƒëi·ªÉm": "R: TB | F: Cao | M: TB","Doanh thu": "25.5%","M·ª•c ti√™u": "TƒÉng t·∫ßn su·∫•t mua","Ph∆∞∆°ng ph√°p": "∆Øu ƒë√£i c√° nh√¢n h√≥a di·ªÖn ra trong th·ªùi gian ng·∫Øn, g·ª≠i tin SMS/mail"},
                    {"Segment": "At Risk","T·ª∑ l·ªá": "18.3%","ƒê·∫∑c ƒëi·ªÉm": "R: Th·∫•p | F: TB | M: Th·∫•p","Doanh thu": "13.3%","M·ª•c ti√™u": "L√¥i k√©o tr·ªü l·∫°i","Ph∆∞∆°ng ph√°p": "Kh·∫£o s√°t & c·∫£i thi·ªán d·ªãch v·ª•, gi·∫£m gi√° ƒë·∫∑c bi·ªát ho·∫∑c qu√† t·∫∑ng"},
                    {"Segment": "Lost","T·ª∑ l·ªá": "7.7%","ƒê·∫∑c ƒëi·ªÉm": "R: Th·∫•p | F: Th·∫•p | M: Th·∫•p","Doanh thu": "3.4%","M·ª•c ti√™u": "C√¢n nh·∫Øc ngu·ªìn l·ª±c, c√≥ th·ªÉ b·ªè qua nh√≥m n√†y","Ph∆∞∆°ng ph√°p": "Kh·∫£o s√°t l√Ω do r·ªùi b·ªè, nh√≥m chi·∫øm t·ª∑ l·ªá √≠t n√™n c√≥ th·ªÉ b·ªè qua"},]
        for seg in segments:
            with st.container():
                st.markdown(f"""<div style='border:1px solid #ccc; border-radius:10px; padding:15px; margin-bottom:10px; background-color:#000000'>
                <h4 style='margin-bottom:5px'>üìå <b>{seg['Segment']}</b> | T·ª∑ l·ªá: {seg['T·ª∑ l·ªá']} | Doanh thu: {seg['Doanh thu']}</h4>
                <p><b>üéØ M·ª•c ti√™u:</b> {seg['M·ª•c ti√™u']}</p>
                <p><b>üîç ƒê·∫∑c ƒëi·ªÉm RFM:</b> {seg['ƒê·∫∑c ƒëi·ªÉm']}</p>
                <p><b>üõ†Ô∏è ƒê·ªÅ xu·∫•t ti·∫øp c·∫≠n:</b> {seg['Ph∆∞∆°ng ph√°p']}</p>
                </div>""", unsafe_allow_html=True)
        st.image('Images/shopping.jfif', use_container_width =True)

# 3. Tra c·ª©u kh√°ch h√†ng
elif section == "üë™ Customer Segmentation":
    st.title("üë™ Tra c·ª©u kh√°ch h√†ng")

    option = st.radio("Ch·ªçn ph∆∞∆°ng th·ª©c tra c·ª©u:", ["üîë Nh·∫≠p m√£ kh√°ch h√†ng", "‚úçÔ∏è Ch·ªçn gi√° tr·ªã RFM", "üìÅ Upload file"])

    if option == "üîë Nh·∫≠p m√£ kh√°ch h√†ng":
        customer_list = sorted(df_segments['Member_number'].unique())
        selected_customers = st.multiselect("Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu m√£ kh√°ch h√†ng:", customer_list)
        if selected_customers:
            result_segments = df_segments[df_segments["Member_number"].isin(selected_customers)]
            result_trans = df[df["Member_number"].isin(selected_customers)]
            if not result_segments.empty:
                st.success(f"‚úÖ T√¨m th·∫•y {len(result_segments)} kh√°ch h√†ng:")
                st.dataframe(result_segments)
                st.success(f"‚úÖ L·ªãch s·ª≠ giao d·ªãch c·ªßa {len(result_segments)} kh√°ch h√†ng tr√™n:")
                result_trans=result_trans.merge(result_segments[['Member_number', 'Segment']], on='Member_number', how='left')
                result_trans=result_trans.rename(columns={'Member_number':'M√£ kh√°ch h√†ng',	'Date':'Th·ªùi gian',	'productId':'M√£ s·∫£n ph·∫©m','items':'S·ªë l∆∞·ª£ng',	'productName':'S·∫£n ph·∫©m','price':'ƒê∆°n gi√°','Category':'Ng√†nh h√†ng','purchase_amount':'T·ªïng ti·ªÅn','Segment':'Nh√≥m'})
                st.dataframe(result_trans)
            else:
               st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng n√†o.")

    elif option == "‚úçÔ∏è Ch·ªçn gi√° tr·ªã RFM":
        recency = st.slider("Recency (S·ªë ng√†y)", min_value=1, max_value=600, value=30, step=1)
        frequency = st.slider("Frequency (S·ªë l·∫ßn mua h√†ng)", min_value=1, max_value=30, value=5, step=1)
        monetary = st.slider("Monetary ($)", min_value=1, max_value=600, value=50, step=5)
        cluster_names = {0: "Potential", 1: "Lost", 2: "Hardcore", 3: "Loyal", 4: "At Risk"}
        input_df = pd.DataFrame([[recency, frequency, monetary]], columns=["Recency", "Frequency", "Monetary"])
        cluster = model.predict(input_df)[0]
        segment_name = cluster_names.get(cluster, "Unknown")
        st.success(f"‚úÖ D·ª± ƒëo√°n kh√°ch h√†ng thu·ªôc nh√≥m: **{segment_name}**")

    elif option == "üìÅ Upload file":
        uploaded_file = st.file_uploader("Upload file CSV ch·ª©a c√°c th√¥ng tin Member_number, Recency, Frequency, Monetary", type="csv")
        if uploaded_file:
            df_uploaded = pd.read_csv(uploaded_file)
            df_uploaded["Cluster"] = model.predict(df_uploaded[['Recency', 'Frequency', 'Monetary']])
            cluster_names = {0: "Potential", 1: "Lost", 2: "Hardcore", 3: "Loyal", 4: "At Risk"}
            df_uploaded["Segment"] = df_uploaded["Cluster"].map(cluster_names)
            df_uploaded.drop('Cluster', axis=1, inplace=True)
            st.success("‚úÖ K·∫øt qu·∫£ ph√¢n nh√≥m:")
            st.dataframe(df_uploaded)
            # T√¨m l·ªãch s·ª≠ giao d·ªãch
            matched_customers = df[df["Member_number"].isin(df_uploaded['Member_number'])]
            if not matched_customers.empty:
                st.success(f"‚úÖ L·ªãch s·ª≠ giao d·ªãch c·ªßa {matched_customers['Member_number'].nunique()} kh√°ch h√†ng tr√™n:")
                matched_customers=matched_customers.merge(df_uploaded[['Member_number', 'Segment']], on='Member_number', how='left')
                matched_customers=matched_customers.rename(columns={'Member_number':'M√£ kh√°ch h√†ng',	'Date':'Th·ªùi gian',	'productId':'M√£ s·∫£n ph·∫©m','items':'S·ªë l∆∞·ª£ng',	'productName':'S·∫£n ph·∫©m','price':'ƒê∆°n gi√°','Category':'Ng√†nh h√†ng','purchase_amount':'T·ªïng ti·ªÅn','Segment':'Nh√≥m'})
                st.dataframe(matched_customers)
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ giao d·ªãch c·ªßa c√°c kh√°ch h√†ng tr√™n.")
